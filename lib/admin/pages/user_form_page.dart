import 'package:flutter/material.dart';
import 'package:fpt_final_project_mobile/admin/entities/user_entity.dart';
import 'package:fpt_final_project_mobile/admin/models/user_model.dart';
import 'package:fpt_final_project_mobile/admin/services/user_service.dart';
import 'package:provider/provider.dart';

class UserFormPage extends StatefulWidget {
  final UserService userService;
  final UserEntity? user;

  const UserFormPage({required this.userService, this.user});

  @override
  _UserFormPageState createState() => _UserFormPageState();
}

class _UserFormPageState extends State<UserFormPage> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _usernameController;
  late TextEditingController _nameController;
  late TextEditingController _emailController;
  late TextEditingController _phoneController;
  late String _role;

  @override
  void initState() {
    super.initState();
    _usernameController = TextEditingController(
      text: widget.user?.username ?? '',
    );
    _nameController = TextEditingController(text: widget.user?.name ?? '');
    _emailController = TextEditingController(text: widget.user?.email ?? '');
    _phoneController = TextEditingController(text: widget.user?.phone ?? '');
    _role = widget.user?.role ?? 'STAFF';
  }

  @override
  void dispose() {
    _usernameController.dispose();
    _nameController.dispose();
    _emailController.dispose();
    _phoneController.dispose();
    super.dispose();
  }

  Future<void> _submitForm() async {
    if (_formKey.currentState!.validate()) {
      try {
        final userService = Provider.of<UserService>(context, listen: false);

        if (widget.user == null) {
          // Create new user
          await userService.createUser(
            UserModel(
              id: '', // Will be generated by server
              username: _usernameController.text,
              name: _nameController.text,
              email: _emailController.text,
              phone: _phoneController.text,
              role: _role,
            ),
          );
        } else {
          // Update existing user
          await userService.updateUser(
            UserModel(
              id: widget.user!.id,
              username: _usernameController.text,
              name: _nameController.text,
              email: _emailController.text,
              phone: _phoneController.text,
              role: _role,
              imageUrl: widget.user!.imageUrl,
              staffProfile: widget.user!.staffProfile != null
                  ? StaffProfileModel.fromEntity(widget.user!.staffProfile!)
                  : null,
            ),
          );
        }

        Navigator.pop(context, true); // Return true to indicate success
      } catch (e) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('Failed to save user: $e')));
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.user == null ? 'Add User' : 'Edit User'),
        actions: [IconButton(icon: Icon(Icons.save), onPressed: _submitForm)],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              // Add your form fields here
              // Similar to the previous implementation
            ],
          ),
        ),
      ),
    );
  }
}
